{
  "service": {
    "service": "graphql-api-and-serverless",
    "serviceObject": {
      "name": "graphql-api-and-serverless"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "region": "us-east-1",
      "memorySize": 256,
      "runtime": "nodejs12.x",
      "role": "LambdaRole",
      "vpc": {
        "securityGroupIds": [
          {
            "Ref": "ServerlessSecurityGroup"
          }
        ],
        "subnetIds": [
          {
            "Ref": "ServerlessSubnetA"
          },
          {
            "Ref": "ServerlessSubnetB"
          },
          {
            "Ref": "ServerlessSubnetC"
          }
        ]
      },
      "environment": {
        "AURORA_HOST": {
          "Fn::GetAtt": [
            "AuroraRDSCluster",
            "Endpoint.Address"
          ]
        },
        "AURORA_PORT": {
          "Fn::GetAtt": [
            "AuroraRDSCluster",
            "Endpoint.Port"
          ]
        },
        "DB_NAME": "graphql",
        "USERNAME": "master",
        "PASSWORD": "password"
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "GraphqlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/graphql-api-and-serverless-dev-graphql"
            }
          },
          "PlaygroundLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/graphql-api-and-serverless-dev-playground"
            }
          },
          "AllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/graphql-api-and-serverless-dev-allUsers"
            }
          },
          "GraphqlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/graphql-api-and-serverless/dev/1606775843560-2020-11-30T22:37:23.560Z/graphql-api-and-serverless.zip"
              },
              "FunctionName": "graphql-api-and-serverless-dev-graphql",
              "Handler": "handler.server",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "LambdaRole",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AURORA_HOST": {
                    "Fn::GetAtt": [
                      "AuroraRDSCluster",
                      "Endpoint.Address"
                    ]
                  },
                  "AURORA_PORT": {
                    "Fn::GetAtt": [
                      "AuroraRDSCluster",
                      "Endpoint.Port"
                    ]
                  },
                  "DB_NAME": "graphql",
                  "USERNAME": "master",
                  "PASSWORD": "password"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Ref": "ServerlessSecurityGroup"
                  }
                ],
                "SubnetIds": [
                  {
                    "Ref": "ServerlessSubnetA"
                  },
                  {
                    "Ref": "ServerlessSubnetB"
                  },
                  {
                    "Ref": "ServerlessSubnetC"
                  }
                ]
              }
            },
            "DependsOn": [
              "GraphqlLogGroup",
              "LambdaRole"
            ]
          },
          "GraphqlLambdaVersionHXnOWbycv2kYbC4av3Pmzf1yANuZ8Up2LkQHGaf1f4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GraphqlLambdaFunction"
              },
              "CodeSha256": "Ahe7H7AcPA5gmRuuUp3b/7LHTebnMQv8ZKPitfy8m8E="
            }
          },
          "PlaygroundLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/graphql-api-and-serverless/dev/1606775843560-2020-11-30T22:37:23.560Z/graphql-api-and-serverless.zip"
              },
              "FunctionName": "graphql-api-and-serverless-dev-playground",
              "Handler": "handler.playground",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "LambdaRole",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AURORA_HOST": {
                    "Fn::GetAtt": [
                      "AuroraRDSCluster",
                      "Endpoint.Address"
                    ]
                  },
                  "AURORA_PORT": {
                    "Fn::GetAtt": [
                      "AuroraRDSCluster",
                      "Endpoint.Port"
                    ]
                  },
                  "DB_NAME": "graphql",
                  "USERNAME": "master",
                  "PASSWORD": "password"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Ref": "ServerlessSecurityGroup"
                  }
                ],
                "SubnetIds": [
                  {
                    "Ref": "ServerlessSubnetA"
                  },
                  {
                    "Ref": "ServerlessSubnetB"
                  },
                  {
                    "Ref": "ServerlessSubnetC"
                  }
                ]
              }
            },
            "DependsOn": [
              "PlaygroundLogGroup",
              "LambdaRole"
            ]
          },
          "PlaygroundLambdaVersionnMa4kQsTYQelpvFroku8whJjr1UrM4pDYoOGuNbck": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PlaygroundLambdaFunction"
              },
              "CodeSha256": "Ahe7H7AcPA5gmRuuUp3b/7LHTebnMQv8ZKPitfy8m8E="
            }
          },
          "AllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/graphql-api-and-serverless/dev/1606775843560-2020-11-30T22:37:23.560Z/graphql-api-and-serverless.zip"
              },
              "FunctionName": "graphql-api-and-serverless-dev-allUsers",
              "Handler": "handler.allUsers",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "LambdaRole",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AURORA_HOST": {
                    "Fn::GetAtt": [
                      "AuroraRDSCluster",
                      "Endpoint.Address"
                    ]
                  },
                  "AURORA_PORT": {
                    "Fn::GetAtt": [
                      "AuroraRDSCluster",
                      "Endpoint.Port"
                    ]
                  },
                  "DB_NAME": "graphql",
                  "USERNAME": "master",
                  "PASSWORD": "password"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Ref": "ServerlessSecurityGroup"
                  }
                ],
                "SubnetIds": [
                  {
                    "Ref": "ServerlessSubnetA"
                  },
                  {
                    "Ref": "ServerlessSubnetB"
                  },
                  {
                    "Ref": "ServerlessSubnetC"
                  }
                ]
              }
            },
            "DependsOn": [
              "AllUsersLogGroup",
              "LambdaRole"
            ]
          },
          "AllUsersLambdaVersionzZeK0TAW5NaFMqNYjuibnKbLgV9gppnyw3kOoPvcXHY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AllUsersLambdaFunction"
              },
              "CodeSha256": "Ahe7H7AcPA5gmRuuUp3b/7LHTebnMQv8ZKPitfy8m8E="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-graphql-api-and-serverless",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GraphqlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PlaygroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1606775836837": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodPost",
              "ApiGatewayMethodGet"
            ]
          },
          "GraphqlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GraphqlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PlaygroundLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PlaygroundLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "sts:AssumeRole",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    }
                  }
                ],
                "Version": "2012-10-17"
              },
              "Policies": [
                {
                  "PolicyName": "CanLog",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*:*:*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "network-lambda-role-policy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ec2:DescribeInstances",
                          "ec2:CreateNetworkInterface",
                          "ec2:AttachNetworkInterface",
                          "ec2:DescribeNetworkInterfaces",
                          "ec2:DeleteNetworkInterface"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ServerlessInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessInternetGateway"
                }
              ]
            }
          },
          "ServerlessVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "CidrBlock": "10.0.0.0/16",
              "EnableDnsSupport": true,
              "EnableDnsHostnames": true,
              "InstanceTenancy": "default",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessVPC"
                }
              ]
            }
          },
          "ServerlessVPCGA": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "InternetGatewayId": {
                "Ref": "ServerlessInternetGateway"
              }
            }
          },
          "ServerlessSubnetA": {
            "DependsOn": "ServerlessVPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "AvailabilityZone": "us-east-1a",
              "CidrBlock": "10.0.0.0/24",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSubnetA"
                }
              ]
            }
          },
          "ServerlessSubnetB": {
            "DependsOn": "ServerlessVPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "AvailabilityZone": "us-east-1b",
              "CidrBlock": "10.0.1.0/24",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSubnetB"
                }
              ]
            }
          },
          "ServerlessSubnetC": {
            "DependsOn": "ServerlessVPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "AvailabilityZone": "us-east-1c",
              "CidrBlock": "10.0.2.0/24",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSubnetC"
                }
              ]
            }
          },
          "ServerlessSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
              "DBSubnetGroupDescription": "RDS Subnet Group",
              "SubnetIds": [
                {
                  "Ref": "ServerlessSubnetA"
                },
                {
                  "Ref": "ServerlessSubnetB"
                },
                {
                  "Ref": "ServerlessSubnetC"
                }
              ],
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSubnetGroup"
                }
              ]
            }
          },
          "ServerlessSecurityGroup": {
            "DependsOn": "ServerlessVPC",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "SecurityGroup for Serverless Functions",
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "0",
                  "ToPort": "65535",
                  "CidrIp": "0.0.0.0/0"
                }
              ],
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSecurityGroup"
                }
              ]
            }
          },
          "RouteTablePublic": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "public-route"
                }
              ]
            }
          },
          "RoutePublic": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "ServerlessInternetGateway"
              },
              "RouteTableId": {
                "Ref": "RouteTablePublic"
              }
            }
          },
          "RouteTableAssociationSubnetA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "RouteTableId": {
                "Ref": "RouteTablePublic"
              },
              "SubnetId": {
                "Ref": "ServerlessSubnetA"
              }
            }
          },
          "RouteTableAssociationSubnetB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "RouteTableId": {
                "Ref": "RouteTablePublic"
              },
              "SubnetId": {
                "Ref": "ServerlessSubnetB"
              }
            }
          },
          "RouteTableAssociationSubnetC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "RouteTableId": {
                "Ref": "RouteTablePublic"
              },
              "SubnetId": {
                "Ref": "ServerlessSubnetC"
              }
            }
          },
          "AuroraRDSClusterParameter": {
            "Type": "AWS::RDS::DBClusterParameterGroup",
            "Properties": {
              "Description": "Parameter group for the Serverless Aurora RDS DB.",
              "Family": "aurora5.6",
              "Parameters": {
                "character_set_database": "utf32"
              }
            }
          },
          "AuroraRDSInstanceParameter": {
            "Type": "AWS::RDS::DBParameterGroup",
            "Properties": {
              "Description": "Parameter group for the Serverless Aurora RDS DB.",
              "Family": "aurora5.6",
              "Parameters": {
                "sql_mode": "IGNORE_SPACE",
                "max_connections": 100,
                "wait_timeout": 900,
                "interactive_timeout": 900
              }
            }
          },
          "AuroraRDSCluster": {
            "Type": "AWS::RDS::DBCluster",
            "Properties": {
              "MasterUsername": "master",
              "MasterUserPassword": "password",
              "DBSubnetGroupName": {
                "Ref": "ServerlessSubnetGroup"
              },
              "Engine": "aurora",
              "EngineMode": "serverless",
              "EnableHttpEndpoint": true,
              "EngineVersion": "5.6",
              "StorageEncrypted": true,
              "DatabaseName": "graphql",
              "BackupRetentionPeriod": 3,
              "DBClusterParameterGroupName": {
                "Ref": "AuroraRDSClusterParameter"
              },
              "VpcSecurityGroupIds": [
                {
                  "Ref": "ServerlessSecurityGroup"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "GraphqlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GraphqlLambdaVersionHXnOWbycv2kYbC4av3Pmzf1yANuZ8Up2LkQHGaf1f4"
            }
          },
          "PlaygroundLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PlaygroundLambdaVersionnMa4kQsTYQelpvFroku8whJjr1UrM4pDYoOGuNbck"
            }
          },
          "AllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AllUsersLambdaVersionzZeK0TAW5NaFMqNYjuibnKbLgV9gppnyw3kOoPvcXHY"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "DB_NAME": "graphql",
      "USERNAME": "master",
      "PASSWORD": "password",
      "AURORA": {
        "HOST": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"AURORA_HOST\"]"
        },
        "PORT": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"AURORA_PORT\"]"
        },
        "VPC_CIDR": 10
      }
    },
    "plugins": [
      "serverless-pseudo-parameters"
    ],
    "pluginsData": {},
    "functions": {
      "graphql": {
        "handler": "handler.server",
        "events": [
          {
            "http": {
              "path": "",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "graphql-api-and-serverless-dev-graphql",
        "package": {},
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "playground": {
        "handler": "handler.playground",
        "events": [
          {
            "http": {
              "path": "",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "graphql-api-and-serverless-dev-playground",
        "package": {},
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "allUsers": {
        "handler": "handler.allUsers",
        "events": [],
        "name": "graphql-api-and-serverless-dev-allUsers",
        "package": {},
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "LambdaRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "Policies": [
              {
                "PolicyName": "CanLog",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "network-lambda-role-policy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ec2:DescribeInstances",
                        "ec2:CreateNetworkInterface",
                        "ec2:AttachNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DeleteNetworkInterface"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "ServerlessInternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessInternetGateway"
              }
            ]
          }
        },
        "ServerlessVPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": "10.0.0.0/16",
            "EnableDnsSupport": true,
            "EnableDnsHostnames": true,
            "InstanceTenancy": "default",
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessVPC"
              }
            ]
          }
        },
        "ServerlessVPCGA": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "InternetGatewayId": {
              "Ref": "ServerlessInternetGateway"
            }
          }
        },
        "ServerlessSubnetA": {
          "DependsOn": "ServerlessVPC",
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "AvailabilityZone": "us-east-1a",
            "CidrBlock": "10.0.0.0/24",
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSubnetA"
              }
            ]
          }
        },
        "ServerlessSubnetB": {
          "DependsOn": "ServerlessVPC",
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "AvailabilityZone": "us-east-1b",
            "CidrBlock": "10.0.1.0/24",
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSubnetB"
              }
            ]
          }
        },
        "ServerlessSubnetC": {
          "DependsOn": "ServerlessVPC",
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "AvailabilityZone": "us-east-1c",
            "CidrBlock": "10.0.2.0/24",
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSubnetC"
              }
            ]
          }
        },
        "ServerlessSubnetGroup": {
          "Type": "AWS::RDS::DBSubnetGroup",
          "Properties": {
            "DBSubnetGroupDescription": "RDS Subnet Group",
            "SubnetIds": [
              {
                "Ref": "ServerlessSubnetA"
              },
              {
                "Ref": "ServerlessSubnetB"
              },
              {
                "Ref": "ServerlessSubnetC"
              }
            ],
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSubnetGroup"
              }
            ]
          }
        },
        "ServerlessSecurityGroup": {
          "DependsOn": "ServerlessVPC",
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "SecurityGroup for Serverless Functions",
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": "0",
                "ToPort": "65535",
                "CidrIp": "0.0.0.0/0"
              }
            ],
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSecurityGroup"
              }
            ]
          }
        },
        "RouteTablePublic": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "public-route"
              }
            ]
          }
        },
        "RoutePublic": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "ServerlessInternetGateway"
            },
            "RouteTableId": {
              "Ref": "RouteTablePublic"
            }
          }
        },
        "RouteTableAssociationSubnetA": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "RouteTableId": {
              "Ref": "RouteTablePublic"
            },
            "SubnetId": {
              "Ref": "ServerlessSubnetA"
            }
          }
        },
        "RouteTableAssociationSubnetB": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "RouteTableId": {
              "Ref": "RouteTablePublic"
            },
            "SubnetId": {
              "Ref": "ServerlessSubnetB"
            }
          }
        },
        "RouteTableAssociationSubnetC": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "RouteTableId": {
              "Ref": "RouteTablePublic"
            },
            "SubnetId": {
              "Ref": "ServerlessSubnetC"
            }
          }
        },
        "AuroraRDSClusterParameter": {
          "Type": "AWS::RDS::DBClusterParameterGroup",
          "Properties": {
            "Description": "Parameter group for the Serverless Aurora RDS DB.",
            "Family": "aurora5.6",
            "Parameters": {
              "character_set_database": "utf32"
            }
          }
        },
        "AuroraRDSInstanceParameter": {
          "Type": "AWS::RDS::DBParameterGroup",
          "Properties": {
            "Description": "Parameter group for the Serverless Aurora RDS DB.",
            "Family": "aurora5.6",
            "Parameters": {
              "sql_mode": "IGNORE_SPACE",
              "max_connections": 100,
              "wait_timeout": 900,
              "interactive_timeout": 900
            }
          }
        },
        "AuroraRDSCluster": {
          "Type": "AWS::RDS::DBCluster",
          "Properties": {
            "MasterUsername": "master",
            "MasterUserPassword": "password",
            "DBSubnetGroupName": {
              "Ref": "ServerlessSubnetGroup"
            },
            "Engine": "aurora",
            "EngineMode": "serverless",
            "EnableHttpEndpoint": true,
            "EngineVersion": "5.6",
            "StorageEncrypted": true,
            "DatabaseName": "graphql",
            "BackupRetentionPeriod": 3,
            "DBClusterParameterGroupName": {
              "Ref": "AuroraRDSClusterParameter"
            },
            "VpcSecurityGroupIds": [
              {
                "Ref": "ServerlessSecurityGroup"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "/Users/marcelo/development/open-source/serverless-examples/aws-node-graphql-and-rds/.serverless/graphql-api-and-serverless.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/graphql-api-and-serverless/dev/1606775843560-2020-11-30T22:37:23.560Z",
    "artifact": "graphql-api-and-serverless.zip"
  }
}